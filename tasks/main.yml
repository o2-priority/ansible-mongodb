---

- include_vars: "{{ ansible_os_family|lower }}.yml"

- name: MongoDB Install
  include: "install-{{ ansible_os_family|lower }}.yml"

- name: Update mongodb config file
  template:
    src:   mongod.conf.j2
    dest:  "{{ mongodb_conf_file }}"
    owner: root
    group: root
    mode:  0644
  notify: Restart mongodb

- name: Update mongodb defaults settings config file
  template:
    src:   etc.default.mongod.j2
    dest:  /etc/default/mongod
    owner: root
    group: root
    mode:  0644
  when: mongodb_apply_defaults_settings and ansible_os_family|lower == 'debian'
  notify: Restart mongodb

- name: Create mongodb logrotate config
  template:
    src:   logrotate.j2
    dest:  /etc/logrotate.d/mongod
    owner: root
    group: root
    mode:  0644

- name: Create disable-transparent-hugepages init script
  copy:
    src:   disable-transparent-hugepages
    dest:  /etc/init.d/disable-transparent-hugepages
    owner: root
    group: root
    mode:  0755
  notify: Restart mongodb
  when: mongodb_disable_thp

- name: Enable disable-transparent-hugepages init script
  service: name=disable-transparent-hugepages enabled=yes
  when: mongodb_disable_thp

- name: Disable transparent hugepages
  shell: /etc/init.d/disable-transparent-hugepages start && touch /tmp/thp
  args:
    creates: /tmp/thp
  when: mongodb_disable_thp

- name: Create tuned profile directory for transparent-hugepages
  file:
    path:  "/etc/tuned/no-thp"
    owner: root
    group: root
    mode:  0755
    state: directory
  when: ansible_os_family|lower == 'redhat'

- name: Create tuned profile config for transparent-hugepages
  copy:
    src:   "no-thp-tuned.conf"
    dest:  "/etc/tuned/no-thp/tuned.conf"
    owner: root
    group: root
    mode:  0755
  when: mongodb_disable_thp and ansible_os_family|lower == 'redhat'
  register: tuned

- name: Enable tuned profile to disable transparent-hugepages
  shell: tuned-adm profile no-thp
  when: tuned|change and mongodb_disable_thp and ansible_os_family|lower == 'redhat'

- name: Start mongodb
  service: name=mongod enabled=yes state=started

- include: replica_set.yml
  when: mongodb_create_replica_set

- name: Check if it is master
  shell: >
    mongo --host {{ mongodb_net.bindIp }} --port {{ mongodb_net.port }} \
        --quiet --eval "db.isMaster().ismaster"
  register: is_master

- name: Create Feature Compatibility Version Config
  template: src=setFeatureCompatibilityVersion.js.j2 dest=/var/tmp/setFeatureCompatibilityVersion.js
  when: is_master.stdout_lines == "true"

- name: Set Feature Compatibility Version on mongodb primary
  shell: >
    mongo --host {{ mongodb_net.bindIp }} --port {{ mongodb_net.port }} \
        --quiet --eval 'load("/var/tmp/setFeatureCompatibilityVersion.js")'
  when: is_master.stdout_lines == "true"